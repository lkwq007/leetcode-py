class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # articulation points
        self.timer=0
        total=len(graph)
        tin=[-1]*total
        low=[-1]*total
        articulation=[False]*total
        # virus count
        virus=[0]*total
        # other data
        root=[i for i in range(total)]
        counter=[0]*total
        for idx in initial:
            virus[idx]=1
        record={}
        def dfs(u,parent,root_idx):
            if virus[u]!=0 and u!=root_idx:
                virus[root_idx]+=1
            root[u]=idx
            counter[root_idx]+=1
            tin[u]=self.timer
            low[u]=self.timer
            self.timer+=1
            cnt=0
            child_cnt=[]
            child_cnt_=[]
            child_virus=[]
            child_virus_=[]
            for v in range(total):
                if graph[u][v]==1 and u!=v and v!=parent:
                    if tin[v]!=-1:
                        low[u]=min(low[u],tin[v])
                    else:
                        a,b=dfs(v,u,root_idx)
                        low[u]=min(low[u],low[v])
                        child_virus_.append(b)
                        child_cnt_.append(a)
                        if low[v]>=tin[u] and parent!=-1:
                            articulation[u]=True
                            child_virus.append(b)
                            child_cnt.append(a)
                        cnt+=1
            if cnt>1 and parent==-1:
                articulation[u]=True
            if articulation[u]:
                if parent==-1:
                    record[u]=(child_cnt_,child_virus_)
                else:
                    record[u]=(child_cnt,child_virus)
            return 1+sum(child_cnt_),virus[u]+sum(child_virus_)
        ret=-1
        removed=0
        for idx in sorted(initial):
            if tin[idx]==-1:
                dfs(idx,-1,idx)
            total_size=counter[root[idx]]
            total_virus=virus[root[idx]]
            if total_virus==1:
                if total_size>removed:
                    ret=idx
                    removed=total_size
            else:
                if articulation[idx]:
                    acc=1
                    for child_cnt,child_virus in zip(*record[idx]):
                        if child_virus==0:
                            acc+=child_cnt
                    if total_virus-1-sum(record[idx][1])==0:
                        acc+=total_size-1-sum(record[idx][0])
                    if acc>removed:
                        ret=idx
                        removed=acc
                elif ret==-1:
                    ret=idx
                    removed=1
        return ret